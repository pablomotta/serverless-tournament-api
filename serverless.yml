org: pablomottadev
app: tournament-login
service: tournament-login
frameworkVersion: '3'

custom:
    tableName: 'users-table-${sls:stage}'

provider:
    name: aws
    runtime: nodejs16.x
    httpApi:
        authorizers:
            customAuthorizer:
                name: tournamentApiAuth
                type: request
                functionArn: arn:aws:lambda:us-east-1:210658735751:function:tournament-api-auth
                enableSimpleResponses: true
                payloadVersion: '2.0'
                identitySource:
                    - $request.header.Authorization
    iam:
        role:
            statements:
                - Effect: Allow
                  Action:
                      - dynamodb:Query
                      - dynamodb:Scan
                      - dynamodb:GetItem
                      - dynamodb:PutItem
                      - dynamodb:UpdateItem
                      - dynamodb:DeleteItem
                  Resource:
                      - Fn::GetAtt: [UsersTable, Arn]
    environment:
        USERS_TABLE: ${self:custom.tableName}

functions:
    getUser:
        handler: src/handler.handler
        events:
            - httpApi:
                  method: get
                  path: /users/{userId}
                  authorizer:
                      name: customAuthorizer
    addUser:
        handler: src/handler.handler
        events:
            - httpApi:
                  method: post
                  path: /users
                  authorizer:
                      name: customAuthorizer

resources:
    Resources:
        UsersTable:
            Type: AWS::DynamoDB::Table
            Properties:
                AttributeDefinitions:
                    - AttributeName: userId
                      AttributeType: S
                KeySchema:
                    - AttributeName: userId
                      KeyType: HASH
                BillingMode: PAY_PER_REQUEST
                TableName: ${self:custom.tableName}
plugins:
    - serverless-plugin-typescript
